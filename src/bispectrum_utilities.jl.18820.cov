        - """
        -     bispectrum_bins(N)
        - 
        -     Number of bispectrum bins with N bins in each direction.
        - """
        2 function bispectrum_bins(N)
        - 
        -     # k1 >= k2 >= k3 and N bins in k1
        4     Int(N*(N + 1)*(N + 2)/6)
        - 
        - end
        - 
        - """
        -     set_k2_min_max(k2min, k2max, l1, i, j, k, i2, j2)
        - 
        -     Find minimum and maximum k2_z values that satisfy k3 < k2 < k1
        - 
        -     # Arguments
        -     - `k2min::float`: minimum value required by k2 < k1
        -     - `k2max::float`: maximum value required by k2 < k1
        -     - `l1::float`: |k1|
        -     - `i,j,k::float`: k1x, k1y, k1z
        -     - `i2,j2::float`: k2x, k2y
        - 
        -     # Output
        -     - `k2min,k2max::float`: New values of k2min/k2max, now accounting for k3 < k2 as well
        - """
 15244638 function set_k2_min_max(k2min, k2max, l1, i, j, k, i2, j2)
 15244638     k2ul = (-l1^2/2 - i*i2 - j*j2)/k
        - 
 15244638     if k == 0
   570576         if (-l1^2/2 - i*i2 - j*j2) + 1e-10 < 0
   456554             return 1, 0
        -         end
 14674062     elseif k > 0
  7337031         if k2ul + 1e-10 > k2max
        -             # 
  6891370         elseif k2ul + 1e-10 < k2min
  4139509             return 1, 0
        -         else
  5949383             k2max = ceil(Int, k2ul)
        -         end
        -     else
  7337031         if k2ul - 1e-10 < k2min
        -             #
  6891370         elseif k2ul - 1e-10 > k2max
  4139509             return 1, 0
        -         else
  2751861             k2min = floor(Int, k2ul)
        -         end
        -     end
        - 
  6509066     return k2min, k2max
        - end
        - 
        - """
        -     tri_index(l1, l2, l3, dk)
        - 
        -     1D index to arrange B(k1,k2,k3) measurements.
        - 
        -     # Parameters
        -     - `l1,l2,l3::float`: lengths of k1, k2, k3
        -     - `dk::float1: bin size
        - """
        - function tri_index(l1, l2, l3, dk, kmin)
        -     k1 = ceil(Int, (l1 - kmin)/dk)
        -     k2 = ceil(Int, (l2 - kmin)/dk)
        -     k3 = ceil(Int, (l3 - kmin)/dk)
        - 
        -     ceil(Int, k1*(k1^2 - 1)/6 + k2*(k2 - 1)/2 + k3)
        - end
        - 
        4 function wrap_index(index, N)
703455265     index <= -1 ? Int(N + index + 1) : Int(index + 1)
        - end
        - 
        - function unwrap_index(index, N)
        -     index > div(N, 2) ? Int(index - N - 1) : Int(index - 1)
        - end
        - 
        - """ 
        -     wrap_index(i1, i2, i3, j1, j2, j3, k1, k2, k3, N)
        - 
        -     Go from k-indeces for k1, k2, k3 to their position in the fftfreq order.
        -     Invert the vectors if kx < 0.
        - 
        -     # Parameters
        -     - `i1, i2, ... ::Int`: Indeces
        -     - `N::Int`: Grid size
        - 
        -     # Output
        -     - `i1n, i2n, ...::Int`: Same indes but in fftfreq order.
        - """
 32567841 function get_indeces(i1, i2, i3, j1, j2, j3, k1, k2, k3, N)
 76891533     i1n = i1 + 1
 76891533     i2n = abs(i2) + 1
 76891533     i3n = abs(i3) + 1
 76891533     if i1 < 0 j1 = - j1; k1 = - k1 end
195783183     if i2 < 0 j2 = - j2; k2 = - k2 end
177267381     if i3 < 0 j3 = - j3; k3 = - k3 end
116709686     j1n = wrap_index(j1, N)
116971900     j2n = wrap_index(j2, N)
118046045     j3n = wrap_index(j3, N)
116709685     k1n = wrap_index(k1, N)
116971900     k2n = wrap_index(k2, N)
118046045     k3n = wrap_index(k3, N)
        - 
 76891533     return i1n, i2n, i3n, j1n, j2n, j3n, k1n, k2n, k3n
        - end
        - 
        - """
        -     loop_over_k1k2!(Nmax, i, Nk, Bk, grid_k, tid, dk)
        - 
        -     Loop over k1y, k1x, k1z, k2x, k2y, k2z values while satisfying k1>k2>k3 condition.
        - 
        -     # Parameters
        -     - `Nmax::Int`: Maximum index needed (set by kmax)
        -     - `i::Int`: Index of k1x
        -     - `Nk::array{Int,Nkbin+1}`: Number of triangles going to that bin
        -     - `Bk::array{Int,Nkbin+1}`: Binned bispectrum
        -     - `grid_k::array{Complex,3}`: delta_k
        -     - `tid::Int`: threadid
        -     - `dk::Float`: Bin width in units of fundamental frequency
        - 
        -     Modifies Bk, Nk, arrays.
        - """
       50 function loop_over_k1k2!(Nmax, k0, kmax, k_fundamental, i, Nk, Bk, grid_k, tid, dk)
       50     Ngrid = size(grid_k)[3]
        -     
       50     jmin = floor(Int, sqrt(kmax^2 / k_fundamental^2 - i^2 + 1e-6))
        -     
      100     for j in -jmin:jmin
     1328         kmin = floor(Int, sqrt(kmax^2 / k_fundamental^2 - i^2 - j^2 + 1e-6))
        -     
     2656         for k in -kmin:kmin
    29446             l1 = sqrt(i^2 + j^2 + k^2)
    29462             if l1 <= k0 continue end
    29430             i2min = -floor(Int, l1)
    29430             i2max = -i2min
        -     
    58860             for i2 in i2min:i2max
   730910                 i3 = -i - i2
   730910                 j2min = - Nmax
   730910                 j2min = -floor(Int, sqrt(l1^2 - i2^2 + eps(Float32)))
   730910                 j2max = -j2min
        - 
  1461820                 for j2 in j2min:j2max
 15244638                     j3 = -j - j2
 15244638                     k2min = -Nmax
 15244638                     k2min = -floor(Int, sqrt(l1^2 - i2^2 - j2^2 + eps(Float32)))
 15244638                     k2max = -k2min
        -                     
 15244638                     k2min, k2max = set_k2_min_max(k2min, k2max, l1, i, j, k, i2, j2)
        -                    
 21753704                     for k2 in k2min:k2max
 49443424                         k3 = -k-k2
 49443424                         l2 = sqrt(i2^2 + j2^2 + k2^2)
 49443747                         if l2 <= k0 continue end
 49443101                         l3 = sqrt(i3^2 + j3^2 + k3^2) 
 99017255                         if l3 > l2 || l3 <= k0 continue end
        - 
 44323692                         ind1 = ceil(Int, (l1 - k0)/dk)
 44323692                         ind2 = ceil(Int, (l2 - k0)/dk)
 44323692                         ind3 = ceil(Int, (l3 - k0)/dk)
        - 
 68061166                         i1n, i2n, i3n, j1n, j2n, j3n, k1n, k2n, k3n = get_indeces(i, i2, i3, j, j2, j3, k, k2, k3, Ngrid)
        -                         
 44323692                         Bk_tmp = grid_k[i1n, j1n, k1n]
 88647384                         if i2 < 0 Bk_tmp *= conj(grid_k[i2n, j2n, k2n]) else Bk_tmp *= grid_k[i2n, j2n, k2n] end
 88647384                         if i3 < 0 Bk_tmp *= conj(grid_k[i3n, j3n, k3n]) else Bk_tmp *= grid_k[i3n, j3n, k3n] end
        - 
 44323692                         mu = k/l1
 44323692                         Nk[tid, ind1, ind2, ind3] += 1 
 44323692                         Bk[tid, ind1, ind2, ind3, 1] += real(Bk_tmp)
 44323692                         Bk[tid, ind1, ind2, ind3, 2] += real(Bk_tmp)*(1 - mu^2)/2
 93796562                         Bk[tid, ind1, ind2, ind3, 3] += real(Bk_tmp)*(3 - 30*mu^2 + 35*mu^4)/8
        - 
        -                      end
        -                 end
        -             end
        -         end
        -     end
        - end 
